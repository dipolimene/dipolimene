# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    sudo apt remove azure-cli -y && sudo apt autoremove -y
    sudo apt-get update
    sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
    curl -sL https://packages.microsoft.com/keys/microsoft.asc |
    gpg --dearmor |
    sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
    AZ_REPO=$(lsb_release -cs)
    echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" |
    sudo tee /etc/apt/sources.list.d/azure-cli.list
    sudo apt-get update
    sudo apt-get install azure-cli=2.15.1-1~bionic
    sudo az version

- task: AzureCLI@2
  inputs:
    azureSubscription: 'SP-DevOps'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $aksrg = "BACKUP-STORAGE"
      
      $hcsrg = "hcsrg"
      
      $aksvnet = (az network vnet list --resource-group $aksrg --query '[].name' -o tsv)
      
      $aksvnetid = az network vnet list --query "[?name=='$aksvnet']" | jq -r ".[].id"
      
      $hcsvnet = (az network vnet list --resource-group $hcsrg --query '[].name' -o tsv)
      
      $hcsvnetid = az network vnet list --query "[?name=='$hcsvnet']" | jq -r ".[].id"
      
      az network vnet peering create --name akstohcs --resource-group $aksrg --vnet-name $aksvnet --remote-vnet $hcsvnetid --allow-vnet-access
      
      Start-Sleep -Seconds 120
      
      az network vnet peering create --name akstohcs --resource-group $aksrg --vnet-name $hcsvnet --remote-vnet $aksvnetid --allow-vnet-access